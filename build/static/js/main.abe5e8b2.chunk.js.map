{"version":3,"sources":["containers/home/Home.js","components/loader-button/LoaderButton.js","auth/auth-utils.js","auth/AuthProvider.js","containers/login/MSLogin.js","containers/person-details/PersonDetails.js","containers/app/App.js","serviceWorker.js","index.js"],"names":["Home","props","className","LoaderButton","isLoading","disabled","Button","Glyphicon","glyph","children","fetchMsGraph","url","accessToken","a","fetch","headers","Authorization","response","json","isIE","ua","window","navigator","userAgent","msie","indexOf","msie11","GRAPH_SCOPES","GRAPH_ENDPOINTS","GRAPH_REQUESTS","LOGIN","scopes","EMAIL","msalApp","UserAgentApplication","auth","clientId","authority","validateAuthority","postLogoutRedirectUri","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","system","navigateFrameWait","logger","error","console","errorPii","info","log","infoPii","verbose","verbosePii","warning","warn","warningPii","useRedirectFlow","C","state","account","emailMessages","graphProfile","request","redirect","acquireTokenSilent","catch","errorMessage","errorCode","length","acquireTokenRedirect","acquireTokenPopup","loginRedirect","loginPopup","setState","message","loginResponse","this","acquireToken","tokenResponse","readMail","logout","e","handleRedirectCallback","getAccount","onSignIn","onSignOut","onRequestEmailToken","Component","AuthProvider","useState","setIsLoading","event","preventDefault","userHasAuthenticated","alert","onSubmit","FormGroup","controlId","bsSize","ControlLabel","block","type","PersonDetails","Row","Col","md","withRouter","setIsAuthenticating","useEffect","onLoad","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAEe,SAASA,EAAKC,GAC3B,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,UACb,8CACA,+EACA,sD,sDCJO,SAASC,EAAT,GAKX,IAJFC,EAIC,EAJDA,UAIC,IAHDF,iBAGC,MAHW,GAGX,MAFDG,gBAEC,SADEJ,EACF,oDACD,OACE,kBAACK,EAAA,EAAD,eACEJ,UAAS,wBAAmBA,GAC5BG,SAAUA,GAAYD,GAClBH,GAEHG,GAAa,kBAACG,EAAA,EAAD,CAAWC,MAAM,UAAUN,UAAU,aAClDD,EAAMQ,U,2DCHAC,EAAY,uCAAG,WAAOC,EAAKC,GAAZ,eAAAC,EAAA,sEACDC,MAAMH,EAAK,CAC9BI,QAAS,CACLC,cAAc,UAAD,OAAYJ,MAHT,cAClBK,EADkB,yBAOjBA,EAASC,QAPQ,2CAAH,wDAUZC,EAAO,WAChB,IAAMC,EAAKC,OAAOC,UAAUC,UACtBC,EAAOJ,EAAGK,QAAQ,UAAY,EAC9BC,EAASN,EAAGK,QAAQ,aAAe,EAKzC,OAAOD,GAAQE,GAGNC,EAIE,YAGFC,EACL,sCADKA,EAEH,+CAGGC,EAAiB,CAC1BC,MAAO,CACHC,OAAQ,CAbJ,SACC,UACE,cAiBXC,MAAO,CACHD,OAAQ,CAACJ,KAOJM,EAAU,IAAIC,IAAqB,CAC5CC,KAAM,CACFC,SALS,uCAOTC,UAAU,qCAAD,OANA,wCAOTC,mBAAmB,EACnBC,sBAAuB,wBACvBC,2BAA2B,GAE/BC,MAAO,CACHC,cAAe,iBACfC,uBAAwBxB,KAE5ByB,OAAQ,CACJC,kBAAmB,EACnBC,OAAQ,CACJC,MAAOC,QAAQD,MACfE,SAAUD,QAAQD,MAClBG,KAAMF,QAAQG,IACdC,QAASJ,QAAQG,IACjBE,QAASL,QAAQG,IACjBG,WAAYN,QAAQG,IACpBI,QAASP,QAAQQ,KACjBC,WAAYT,QAAQQ,SC1E1BE,EAAkBvC,IAGT,WAAAwC,GAAC,mBAER,WAAY1D,GAAQ,IAAD,8BACf,4CAAMA,KAED2D,MAAQ,CACTC,QAAS,KACTd,MAAO,KACPe,cAAe,KACfC,aAAc,MAPH,EAFX,mHAaWC,EAASC,GAbpB,0FAcGhC,EAAQiC,mBAAmBF,GAASG,OAAM,SAAApB,GAG7C,ID9BmBqB,EC8BKrB,EAAMsB,YD7BpBD,EAAaE,SAK/BF,EAAa3C,QAAQ,qBAAuB,GAC5C2C,EAAa3C,QAAQ,yBAA2B,GAChD2C,EAAa3C,QAAQ,mBAAqB,GCuB9B,OAAOwC,EACDhC,EAAQsC,qBAAqBP,GAC7B/B,EAAQuC,kBAAkBR,GDjCjB,IAAAI,ECmCfpB,QAAQD,MAAM,yBAA0BA,EAAMsB,eAtBlD,4KA2BOJ,GA3BP,sFA4BAA,EA5BA,yCA6BOhC,EAAQwC,cAAc5C,EAAeC,QA7B5C,uBAgCwBG,EACvByC,WAAW7C,EAAeC,OAC1BqC,OAAM,SAAApB,GACH,EAAK4B,SAAS,CACV5B,MAAOA,EAAM6B,aApCrB,YAgCEC,EAhCF,gCAyCAC,KAAKH,SAAS,CACVd,QAASgB,EAAchB,QACvBd,MAAO,OA3CX,SA8C4B+B,KAAKC,aAC7BlD,EAAeC,OACjBqC,OAAM,SAAApB,GACJ,EAAK4B,SAAS,CACV5B,MAAOA,EAAM6B,aAlDrB,YA8CMI,EA9CN,0CAuD+BtE,EACvBkB,EACAoD,EAAcpE,aAChBuD,OAAM,WACJ,EAAKQ,SAAS,CACV5B,MAAO,sCA5DnB,YAuDUgB,EAvDV,SAiEQe,KAAKH,SAAS,CACVZ,mBAIJiB,EAAcjD,OAAON,QAAQE,GAA0B,GAtE/D,0CAuEemD,KAAKG,SAASD,EAAcpE,cAvE3C,0IA8EJqB,EAAQiD,WA9EJ,mLAkFwBJ,KAAKC,aAC7BlD,EAAeG,MACf0B,GACFS,OAAM,SAAAgB,GACJ,EAAKR,SAAS,CACV5B,MAAO,yDAvFX,YAkFEiC,EAlFF,iDA4FOF,KAAKG,SAASD,EAAcpE,cA5FnC,8KAgGOA,GAhGP,8FAiGwBF,EACxBkB,EACAhB,GACFuD,OAAM,WACJ,EAAKQ,SAAS,CACV5B,MAAO,uCAtGX,QAiGEe,EAjGF,SA2GAgB,KAAKH,SAAS,CACVb,gBACAf,MAAO,OA7GX,+QAmHJd,EAAQmD,wBAAuB,SAAArC,GAC3B,GAAIA,EAAO,CACP,IAAMqB,EAAerB,EAAMqB,aAAerB,EAAMqB,aAAe,kCAE/D,EAAKO,SAAS,CACV5B,MAAOqB,QAKbP,EAAU5B,EAAQoD,aAExBP,KAAKH,SAAS,CACVd,aAGAA,EAnIA,iCAoI4BiB,KAAKC,aAC7BlD,EAAeC,MACf4B,GAtIJ,YAoIMsB,EApIN,0CA0I+BtE,EACvBkB,EACAoD,EAAcpE,aAChBuD,OAAM,WACJ,EAAKQ,SAAS,CACV5B,MAAO,sCA/InB,YA0IUgB,EA1IV,SAoJQe,KAAKH,SAAS,CACVZ,mBAIJiB,EAAcjD,OAAON,QAAQE,GAA0B,GAzJ/D,0CA0JemD,KAAKG,SAASD,EAAcpE,cA1J3C,sIAgKE,IAAD,OACL,OACI,kBAAC+C,EAAD,iBACQmB,KAAK7E,MADb,CAEI4D,QAASiB,KAAKlB,MAAMC,QACpBC,cAAegB,KAAKlB,MAAME,cAC1Bf,MAAO+B,KAAKlB,MAAMb,MAClBgB,aAAce,KAAKlB,MAAMG,aACzBuB,SAAU,kBAAM,EAAKA,SAAS5B,IAC9B6B,UAAW,kBAAM,EAAKA,aACtBC,oBAAqB,kBAAM,EAAKA,8BA1KpC,GACeC,cC0BhBC,GAnCf,SAAiBzF,GAAQ,IAAD,EACY0F,oBAAS,GADrB,mBACfvF,EADe,KACJwF,EADI,iDAGtB,WAA4BC,GAA5B,SAAAhF,EAAA,6DACEgF,EAAMC,iBACNF,GAAa,GAFf,kBAIU3F,EAAMqF,SAASO,GAJzB,OAKID,GAAa,GACb3F,EAAM8F,sBAAqB,GAN/B,gDAQMC,MAAM,KAAEpB,SACRgB,GAAa,GATnB,0DAHsB,sBAgBtB,OAAS3F,EAAM4D,QAgBX,kBAAC,EAAD,CAAM5D,MAAOA,IAff,yBAAKC,UAAU,SACb,0BAAM+F,SAlBY,6CAmBhB,kBAACC,EAAA,EAAD,CAAWC,UAAU,QAAQC,OAAO,SAClC,kBAACC,EAAA,EAAD,uBAEF,kBAAC,EAAD,CACIC,OAAK,EACLC,KAAK,SACLH,OAAO,QACPhG,UAAWA,GAJf,iB,oCCzBO,SAASoG,EAAcvG,GACpC,OACE,6BACE,kBAACwG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,8CAGN,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,0CAGN,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,6CC4DGC,kBAAWlB,GAvE1B,SAAazF,GAAQ,IAAD,EAC8B0F,oBAAS,GADvC,mBACOkB,GADP,aAE8BlB,oBAAS,GAFvC,mBAEMI,GAFN,uDAQlB,sBAAAlF,EAAA,sDACE,IACEkF,EAAqB9F,EAAM4D,SAE7B,MAAMsB,GACM,oBAANA,GACFa,MAAMb,GAIV0B,GAAoB,GAVtB,4CARkB,sBAgElB,OA5DAC,qBAAU,YAJQ,mCAKhBC,KACC,IA2DD,yBAAK7G,UAAU,mBACb,kBAAC,EAAD,WC9Dc8G,QACW,cAA7B3F,OAAO4F,SAASC,UAEe,UAA7B7F,OAAO4F,SAASC,UAEhB7F,OAAO4F,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDsHtB,kBAAmBjG,WACrBA,UAAUkG,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.abe5e8b2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Home.css\";\nexport default function Home(props) {\n  return (\n    <div className=\"home\">\n      <div className=\"lander\">\n        <h1>Marathon Admin</h1>\n        <p>Marathon Admin Dashboard to be use by BFHL team.</p>\n        <p>Add upload LOGIC HERE</p>\n      </div>\n    </div>\n  );\n}","import React from \"react\";\nimport { Button, Glyphicon } from \"react-bootstrap\";\nimport \"./LoaderButton.css\";\n\nexport default function LoaderButton({\n  isLoading,\n  className = \"\",\n  disabled = false,\n  ...props\n}) {\n  return (\n    <Button\n      className={`loader-button ${className}`}\n      disabled={disabled || isLoading}\n      {...props}\n    >\n      {isLoading && <Glyphicon glyph=\"refresh\" className=\"spinning\" />}\n      {props.children}\n    </Button>\n  );\n}","import { UserAgentApplication } from \"msal\";\n\nexport const requiresInteraction = errorMessage => {\n    if (!errorMessage || !errorMessage.length) {\n        return false;\n    }\n\n    return (\n        errorMessage.indexOf(\"consent_required\") > -1 ||\n        errorMessage.indexOf(\"interaction_required\") > -1 ||\n        errorMessage.indexOf(\"login_required\") > -1\n    );\n};\n\nexport const fetchMsGraph = async (url, accessToken) => {\n    const response = await fetch(url, {\n        headers: {\n            Authorization: `Bearer ${accessToken}`\n        }\n    });\n\n    return response.json();\n};\n\nexport const isIE = () => {\n    const ua = window.navigator.userAgent;\n    const msie = ua.indexOf(\"MSIE \") > -1;\n    const msie11 = ua.indexOf(\"Trident/\") > -1;\n\n    // If you as a developer are testing using Edge InPrivate mode, please add \"isEdge\" to the if check\n    // const isEdge = ua.indexOf(\"Edge/\") > -1;\n\n    return msie || msie11;\n};\n\nexport const GRAPH_SCOPES = {\n    OPENID: \"openid\",\n    PROFILE: \"profile\",\n    USER_READ: \"User.Read\",\n    MAIL_READ: \"Mail.Read\"\n};\n\nexport const GRAPH_ENDPOINTS = {\n    ME: \"https://graph.microsoft.com/v1.0/me\",\n    MAIL: \"https://graph.microsoft.com/v1.0/me/messages\"\n};\n\nexport const GRAPH_REQUESTS = {\n    LOGIN: {\n        scopes: [\n            GRAPH_SCOPES.OPENID,\n            GRAPH_SCOPES.PROFILE,\n            GRAPH_SCOPES.USER_READ\n        ]\n    },\n    EMAIL: {\n        scopes: [GRAPH_SCOPES.MAIL_READ]\n    }\n};\n\nconst clientId = \"273d0f0a-dd61-4cea-86a8-159a67bfbc30\"; //GUID Client Application ID\nconst tenantId = \"dda73bd8-c44f-42f8-ae35-04e83d5e5037\"; //GUID Azure Tenant ID\n\nexport const msalApp = new UserAgentApplication({\n    auth: {\n        clientId: clientId,\n        // authority: \"https://login.microsoftonline.com/common\",\n        authority: `https://login.microsoftonline.com/${tenantId}`,\n        validateAuthority: true,\n        postLogoutRedirectUri: \"http://localhost:3000\",\n        navigateToLoginRequestUrl: false\n    },\n    cache: {\n        cacheLocation: \"sessionStorage\",\n        storeAuthStateInCookie: isIE()\n    },\n    system: {\n        navigateFrameWait: 0,\n        logger: {\n            error: console.error,\n            errorPii: console.error,\n            info: console.log,\n            infoPii: console.log,\n            verbose: console.log,\n            verbosePii: console.log,\n            warning: console.warn,\n            warningPii: console.warn\n        }\n    }\n});\n","import React, { Component } from \"react\";\nimport {\n    msalApp,\n    requiresInteraction,\n    fetchMsGraph,\n    isIE,\n    GRAPH_ENDPOINTS,\n    GRAPH_SCOPES,\n    GRAPH_REQUESTS\n} from \"./auth-utils\";\n\n// If you support IE, our recommendation is that you sign-in using Redirect APIs\nconst useRedirectFlow = isIE();\n// const useRedirectFlow = true;\n\nexport default C =>\n    class AuthProvider extends Component {\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                account: null,\n                error: null,\n                emailMessages: null,\n                graphProfile: null\n            };\n        }\n\n        async acquireToken(request, redirect) {\n            return msalApp.acquireTokenSilent(request).catch(error => {\n                // Call acquireTokenPopup (popup window) in case of acquireTokenSilent failure\n                // due to consent or interaction required ONLY\n                if (requiresInteraction(error.errorCode)) {\n                    return redirect\n                        ? msalApp.acquireTokenRedirect(request)\n                        : msalApp.acquireTokenPopup(request);\n                } else {\n                    console.error('Non-interactive error:', error.errorCode)\n                }\n            });\n        }\n\n        async onSignIn(redirect) {\n            if (redirect) {\n                return msalApp.loginRedirect(GRAPH_REQUESTS.LOGIN);\n            }\n\n            const loginResponse = await msalApp\n                .loginPopup(GRAPH_REQUESTS.LOGIN)\n                .catch(error => {\n                    this.setState({\n                        error: error.message\n                    });\n                });\n\n            if (loginResponse) {\n                this.setState({\n                    account: loginResponse.account,\n                    error: null\n                });\n\n                const tokenResponse = await this.acquireToken(\n                    GRAPH_REQUESTS.LOGIN\n                ).catch(error => {\n                    this.setState({\n                        error: error.message\n                    });\n                });\n\n                if (tokenResponse) {\n                    const graphProfile = await fetchMsGraph(\n                        GRAPH_ENDPOINTS.ME,\n                        tokenResponse.accessToken\n                    ).catch(() => {\n                        this.setState({\n                            error: \"Unable to fetch Graph profile.\"\n                        });\n                    });\n\n                    if (graphProfile) {\n                        this.setState({\n                            graphProfile\n                        });\n                    }\n\n                    if (tokenResponse.scopes.indexOf(GRAPH_SCOPES.MAIL_READ) > 0) {\n                        return this.readMail(tokenResponse.accessToken);\n                    }\n                }\n            }\n        }\n\n        onSignOut() {\n            msalApp.logout();\n        }\n\n        async onRequestEmailToken() {\n            const tokenResponse = await this.acquireToken(\n                GRAPH_REQUESTS.EMAIL,\n                useRedirectFlow\n            ).catch(e => {\n                this.setState({\n                    error: \"Unable to acquire access token for reading email.\"\n                });\n            });\n\n            if (tokenResponse) {\n                return this.readMail(tokenResponse.accessToken);\n            }\n        }\n\n        async readMail(accessToken) {\n            const emailMessages = await fetchMsGraph(\n                GRAPH_ENDPOINTS.MAIL,\n                accessToken\n            ).catch(() => {\n                this.setState({\n                    error: \"Unable to fetch email messages.\"\n                });\n            });\n\n            if (emailMessages) {\n                this.setState({\n                    emailMessages,\n                    error: null\n                });\n            }\n        }\n\n        async componentDidMount() {\n            msalApp.handleRedirectCallback(error => {\n                if (error) {\n                    const errorMessage = error.errorMessage ? error.errorMessage : \"Unable to acquire access token.\";\n                    // setState works as long as navigateToLoginRequestUrl: false\n                    this.setState({\n                        error: errorMessage\n                    });\n                }\n            });\n\n            const account = msalApp.getAccount();\n\n            this.setState({\n                account\n            });\n\n            if (account) {\n                const tokenResponse = await this.acquireToken(\n                    GRAPH_REQUESTS.LOGIN,\n                    useRedirectFlow\n                );\n\n                if (tokenResponse) {\n                    const graphProfile = await fetchMsGraph(\n                        GRAPH_ENDPOINTS.ME,\n                        tokenResponse.accessToken\n                    ).catch(() => {\n                        this.setState({\n                            error: \"Unable to fetch Graph profile.\"\n                        });\n                    });\n\n                    if (graphProfile) {\n                        this.setState({\n                            graphProfile\n                        });\n                    }\n\n                    if (tokenResponse.scopes.indexOf(GRAPH_SCOPES.MAIL_READ) > 0) {\n                        return this.readMail(tokenResponse.accessToken);\n                    }\n                }\n            }\n        }\n\n        render() {\n            return (\n                <C\n                    {...this.props}\n                    account={this.state.account}\n                    emailMessages={this.state.emailMessages}\n                    error={this.state.error}\n                    graphProfile={this.state.graphProfile}\n                    onSignIn={() => this.onSignIn(useRedirectFlow)}\n                    onSignOut={() => this.onSignOut()}\n                    onRequestEmailToken={() => this.onRequestEmailToken()}\n                />\n            );\n        }\n    };\n","import React, { useState } from \"react\";\nimport { FormGroup, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../../components/loader-button/LoaderButton\";\nimport \"./Login.css\";\nimport AuthProvider from \"../../auth/AuthProvider\";\nimport Home from \"../home/Home\";\n\nfunction MSLogin(props) {\n  const [isLoading, setIsLoading] = useState(false);\n  \n  async function handleSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n    try {\n      await props.onSignIn(event);\n      setIsLoading(true);\n      props.userHasAuthenticated(true);\n    } catch (e) {\n        alert(e.message);\n        setIsLoading(false);\n    }\n  }\n\n  return (!props.account  ? (\n    <div className=\"login\">\n      <form onSubmit={handleSubmit}>\n        <FormGroup controlId=\"email\" bsSize=\"large\">\n          <ControlLabel>Hit the Login</ControlLabel>\n        </FormGroup>\n        <LoaderButton\n            block\n            type=\"submit\"\n            bsSize=\"large\"\n            isLoading={isLoading}\n        >\n          MS Login\n        </LoaderButton>\n      </form>\n    </div>)\n    :(<Home props={props}/>)\n  );\n}\nexport default AuthProvider(MSLogin);","import React from \"react\";\nimport \"./PersonDetails.css\";\nimport { Row, Col } from \"react-bootstrap\";\n\nexport default function PersonDetails(props) {\n  return (\n    <div>\n      <Row>\n        <Col md={12}>\n            <header>HealthRX</header>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={12}>\n            <div>Content</div>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={12}>\n            <footer>Footer</footer>\n        </Col>\n      </Row>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from \"react-router-dom\";\nimport { Nav, Navbar, NavItem } from \"react-bootstrap\";\nimport './App.css';\nimport Routes from \"../../routes/Routes\";\nimport AuthProvider from \"../../auth/AuthProvider\";\nimport PersonDetails from \"../person-details/PersonDetails\";\n\nfunction App(props) {\n  const [isAuthenticating, setIsAuthenticating] = useState(true);\n  const [isAuthenticated, userHasAuthenticated] = useState(false);\n\n  useEffect(() => {\n    onLoad();\n  }, []);\n  \n  async function onLoad() {\n    try {\n      userHasAuthenticated(props.account);\n    }\n    catch(e) {\n      if (e !== 'No current user') {\n        alert(e);\n      }\n    }\n  \n    setIsAuthenticating(false);\n  }\n\n  async function handleLogout() {\n    try {\n      await props.onSignOut();\n      userHasAuthenticated(false);\n    }\n    catch(e) {\n      if (e !== 'No current user') {\n        alert(e);\n      }\n    }\n    \n  }\n\n  // return (\n  //   !isAuthenticating &&\n  //   <div className=\"App container-fluid\">\n  //     <Navbar fluid collapseOnSelect>\n  //       <Navbar.Header>\n  //         <Navbar.Brand>\n  //           <Link to=\"/\">Marathon Admin</Link>\n  //         </Navbar.Brand>\n  //         <Navbar.Toggle />\n  //       </Navbar.Header>\n  //       <Navbar.Collapse>\n  //         <Nav pullRight>\n  //           {isAuthenticated || props.account\n  //             ? (<>\n  //               <NavItem>{(!props.graphProfile)? '': props.graphProfile.displayName }</NavItem>\n  //               <NavItem onClick={handleLogout}>Logout</NavItem>\n  //               </>\n  //             )\n  //             : (<>\n  //                 {/* <LinkContainer to=\"/login\">\n  //                   <NavItem>Login</NavItem>\n  //                 </LinkContainer> */}\n  //               </>)\n  //           }\n  //         </Nav>\n  //       </Navbar.Collapse>\n  //     </Navbar>\n  //     <Routes appProps={{ isAuthenticated, userHasAuthenticated }} />\n  //   </div>\n  // );\n  return (\n    <div className=\"container-fluid\">\n      <PersonDetails />\n    </div>\n  );\n}\n\nexport default withRouter(AuthProvider(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './containers/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}